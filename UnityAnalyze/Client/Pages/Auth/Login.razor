@page "/login"
@layout AuthLayout
@using Microsoft.AspNetCore.Components
@using UnityAnalyze.Client.Infrastructure.Providers
@using UnityAnalyze.Shared.Auth
@inject NavigationManager navigationManager
@inject CustomAuthStateProvider authStateProvider

<EditForm class="login-form" OnValidSubmit="OnSubmit" Model="loginRequest">
    <DataAnnotationsValidator/>
    <div class="card mb-0">
        <div class="card-body">
            <div class="text-center mb-3">
                <i class="icon-reading icon-2x text-secondary border-secondary border-3 rounded-pill p-3 mb-3 mt-1"></i>
                <h5 class="mb-0">Login to your account</h5>
                <span class="d-block text-muted">Enter your credentials below</span>
            </div>
            <div class="form-group form-group-feedback form-group-feedback-left">
                <InputText id="inputEmail" class="form-control" @bind-Value="loginRequest.Email" autofocus placeholder="Email"/>
                <ValidationMessage For="@(() => loginRequest.Email)"/>
                <div class="form-control-feedback">
                    <i class="icon-user text-muted"></i>
                </div>
            </div>
            
            <div class="form-group form-group-feedback form-group-feedback-left">
                    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password"/>
                    <ValidationMessage For="@(() => loginRequest.Password)"/>
                    <div class="form-control-feedback">
                        <i class="icon-lock2 text-muted"></i>
                    </div>
                </div>

            <div class="form-check ml-2">
                    <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@loginRequest.RememberMe"/>
                    <label class="form-check-label" for="inputRememberMe">Remember Me</label>
                </div>
                
                <label class="text-danger">@error</label>
            <div class="form-group">
                <button type="submit" class="btn btn-primary btn-block">Sign in</button>
            </div>
        </div>
    </div>

</EditForm>

@code{
    LoginRequest loginRequest { get; set; } = new LoginRequest();
    string error { get; set; }
    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginRequest);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
